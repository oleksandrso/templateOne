plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.9.6'
}

def allureVersion = '2.19.0',
    selenideVersion = '6.7.2',
    junitVersion = '5.9.0'

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


repositories {
    mavenCentral()
}


dependencies {
    testImplementation(
            'org.aspectj:aspectjweaver:1.9.9.1',
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            'io.rest-assured:rest-assured:5.1.1',
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            'org.aeonbits.owner:owner:1.0.12',
            'org.assertj:assertj-core:3.23.1',
            'org.slf4j:slf4j-simple:1.7.36',
            "org.junit.jupiter:junit-jupiter:$junitVersion")

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
}

task regression(type: Test) {
    useJUnitPlatform {
        includeTags 'regression'
    }
}
